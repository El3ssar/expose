{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"exposepy exposepy is a minimalist Python library that makes your public API explicit, refactor-proof, and automatic. No more boilerplate. No more forgotten __all__ . Just declare what you want public. \ud83d\udce6 Installation pip install exposepy \ud83e\udde0 Why use exposepy? \u2705 Zero-boilerplate API exposure with @expose \u2705 Automatic __all__ population \u2705 Cleaner dir() output (shows only public API) \u2705 Cross-module reexports with reexpose() \u2705 Supports aliasing: @expose(name=\"alias\") \u2705 Refactor-safe and declarative \ud83d\ude80 Basic Usage from exposepy import expose @expose def foo(): return 42 @expose(name=\"bar_alias\") def bar(): return 123 Result: import mymodule print(mymodule.__all__) # ['foo', 'bar_alias'] print(dir(mymodule)) # ['foo', 'bar_alias'] \ud83d\udd01 Cross-module Re-Export # module_a.py from exposepy import expose @expose def internal_tool(): ... # module_b.py from module_a import internal_tool from exposepy import reexpose reexpose(internal_tool, name=\"public_tool\") Now module_b.__all__ == ['public_tool'] . \ud83d\udcda Reference @expose @expose def symbol(): ... Optionally rename: @expose(name=\"alias_name\") def symbol(): ... reexpose reexpose(symbol) reexpose(symbol, name=\"alias\") Useful to re-export symbols across module boundaries cleanly. \ud83d\udee0 Versioning exposepy uses Git-based versioning. To see the current version: pip show exposepy \ud83e\udd1d Contributing See the GitHub repo and the CONTRIBUTING.md . \ud83d\udd17 Links GitHub PyPI","title":"exposepy"},{"location":"#exposepy","text":"exposepy is a minimalist Python library that makes your public API explicit, refactor-proof, and automatic. No more boilerplate. No more forgotten __all__ . Just declare what you want public.","title":"exposepy"},{"location":"#installation","text":"pip install exposepy","title":"\ud83d\udce6 Installation"},{"location":"#why-use-exposepy","text":"\u2705 Zero-boilerplate API exposure with @expose \u2705 Automatic __all__ population \u2705 Cleaner dir() output (shows only public API) \u2705 Cross-module reexports with reexpose() \u2705 Supports aliasing: @expose(name=\"alias\") \u2705 Refactor-safe and declarative","title":"\ud83e\udde0 Why use exposepy?"},{"location":"#basic-usage","text":"from exposepy import expose @expose def foo(): return 42 @expose(name=\"bar_alias\") def bar(): return 123","title":"\ud83d\ude80 Basic Usage"},{"location":"#result","text":"import mymodule print(mymodule.__all__) # ['foo', 'bar_alias'] print(dir(mymodule)) # ['foo', 'bar_alias']","title":"Result:"},{"location":"#cross-module-re-export","text":"# module_a.py from exposepy import expose @expose def internal_tool(): ... # module_b.py from module_a import internal_tool from exposepy import reexpose reexpose(internal_tool, name=\"public_tool\") Now module_b.__all__ == ['public_tool'] .","title":"\ud83d\udd01 Cross-module Re-Export"},{"location":"#reference","text":"","title":"\ud83d\udcda Reference"},{"location":"#expose","text":"@expose def symbol(): ... Optionally rename: @expose(name=\"alias_name\") def symbol(): ...","title":"@expose"},{"location":"#reexpose","text":"reexpose(symbol) reexpose(symbol, name=\"alias\") Useful to re-export symbols across module boundaries cleanly.","title":"reexpose"},{"location":"#versioning","text":"exposepy uses Git-based versioning. To see the current version: pip show exposepy","title":"\ud83d\udee0 Versioning"},{"location":"#contributing","text":"See the GitHub repo and the CONTRIBUTING.md .","title":"\ud83e\udd1d Contributing"},{"location":"#links","text":"GitHub PyPI","title":"\ud83d\udd17 Links"}]}